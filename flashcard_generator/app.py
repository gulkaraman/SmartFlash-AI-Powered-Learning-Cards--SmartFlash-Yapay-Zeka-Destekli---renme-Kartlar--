import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os

# .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="Flashcard AsistanÄ±",
    page_icon="ğŸ’­",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Gemini API yapÄ±landÄ±rmasÄ±
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    st.error("API anahtarÄ± bulunamadÄ±. LÃ¼tfen .env dosyasÄ±nÄ± kontrol edin.")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)

# Model kurulumu
model = genai.GenerativeModel('gemini-1.5-flash')

def generate_flashcards(topic, num_cards=5):
    try:
        # Daha detaylÄ± prompt
        prompt = f"""Sen bir eÄŸitim asistanÄ±sÄ±n. LÃ¼tfen {topic} konusu hakkÄ±nda {num_cards} adet eÄŸitici flashcard oluÅŸtur.
        Her flashcard iÃ§in bir soru ve cevap iÃ§ermeli.
        Format ÅŸu ÅŸekilde olmalÄ±:
        S: [Soru]
        C: [Cevap]
        
        Ä°Ã§erik eÄŸitici, net ve Ã¶zlÃ¼ olmalÄ±. TÃ¼rkÃ§e yanÄ±t ver."""
        
        # API Ã§aÄŸrÄ±sÄ±
        response = model.generate_content(prompt)
        
        # YanÄ±tÄ± kontrol et
        if response and response.text:
            return response.text
        else:
            return "ÃœzgÃ¼nÃ¼m, ÅŸu anda yanÄ±t oluÅŸturulamÄ±yor. LÃ¼tfen tekrar deneyin."
            
    except Exception as e:
        st.markdown(f"<div style='color: #ffffff; background-color: #1a1a1a; padding: 10px; border-radius: 5px;'>Bir hata oluÅŸtu: {str(e)}</div>", unsafe_allow_html=True)
        return f"Flashcard oluÅŸturulurken bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin."

# Ana stil
st.markdown("""
<style>
    /* Genel sayfa stili */
    .stApp {
        background-color: #343541;
        color: #ffffff;
    }
    
    /* BaÅŸlÄ±k stili */
    h1 {
        color: #ffffff !important;
        text-align: center;
        font-size: 2em;
        margin-bottom: 1em;
    }
    
    /* Input alanÄ± stili */
    .stTextInput>div>div>input {
        background-color: #40414f;
        color: #ffffff;
        border: 1px solid #565869;
        border-radius: 5px;
        padding: 10px;
    }
    
    /* Slider stili */
    .stSlider>div>div>div {
        background-color: #10a37f;
    }
    
    /* Buton stili */
    .stButton>button {
        width: 100%;
        background-color: #10a37f;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
    }
    
    .stButton>button:hover {
        background-color: #0d8c6d;
    }
    
    /* Mesaj kutularÄ± stili */
    .user-message {
        background-color: #40414f;
        color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
    }
    
    .assistant-message {
        background-color: #444654;
        color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
    }
    
    /* UyarÄ± mesajlarÄ± stili */
    .warning-message {
        background-color: #1a1a1a;
        color: #ffffff;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
    }
    
    /* Spinner stili */
    .stSpinner>div {
        color: #10a37f;
    }
</style>
""", unsafe_allow_html=True)

# Ana baÅŸlÄ±k
st.markdown("<h1>Flashcard AsistanÄ±</h1>", unsafe_allow_html=True)

# Sohbet geÃ§miÅŸi iÃ§in session state
if 'messages' not in st.session_state:
    st.session_state.messages = []

# KullanÄ±cÄ± giriÅŸi
user_input = st.text_input("", placeholder="Hangi konu hakkÄ±nda flashcard oluÅŸturmak istersiniz?")

# Flashcard sayÄ±sÄ± seÃ§imi
num_cards = st.slider("", 1, 10, 5, help="OluÅŸturulacak flashcard sayÄ±sÄ±")

# Flashcard oluÅŸturma butonu
if st.button("OluÅŸtur", type="primary"):
    if user_input:
        # KullanÄ±cÄ± mesajÄ±nÄ± ekle
        st.session_state.messages.append({"role": "user", "content": f"Konu: {user_input}\nFlashcard SayÄ±sÄ±: {num_cards}"})
        
        # AI yanÄ±tÄ±nÄ± al
        with st.spinner("OluÅŸturuluyor..."):
            try:
                response = generate_flashcards(user_input, num_cards)
                if response:
                    st.session_state.messages.append({"role": "assistant", "content": response})
                else:
                    st.markdown("<div class='warning-message'>YanÄ±t alÄ±namadÄ±. LÃ¼tfen tekrar deneyin.</div>", unsafe_allow_html=True)
            except Exception as e:
                st.markdown(f"<div class='warning-message'>Bir hata oluÅŸtu: {str(e)}</div>", unsafe_allow_html=True)
        
        # MesajlarÄ± gÃ¶ster
        for message in st.session_state.messages:
            if message["role"] == "user":
                st.markdown(f"<div class='user-message'><b>Siz:</b> {message['content']}</div>", unsafe_allow_html=True)
            else:
                st.markdown(f"<div class='assistant-message'><b>Asistan:</b> {message['content']}</div>", unsafe_allow_html=True)
    else:
        st.markdown("<div class='warning-message'>LÃ¼tfen bir konu girin!</div>", unsafe_allow_html=True) 